Ae Framework コーディング規約

以下の記述で平文で明言されている事柄は、ただし書きを除いて、
必ず従うという意味となる。
そのため、「必ず」や「完全に」などの記述は不要である。


[ソースコード一般]

文字コードはUTF-8 BOM無しとする。

改行コードはLFのみを使用する。

インデントはスペース4つを使用する。

行の末尾にスペースやタブを残さない。

ファイル末尾は改行のみの空行1行で終わる。

フォルダ分けはむやみに行わない。


[PHPソースコード]

1ファイル行数は1000行以内にする。

1関数行数は100行以内にする。

1行文字数は100文字以内にする。

PHPコードのみのプログラムファイルは、「<?php」の前に空白や改行を書かない。
また、「?>」を末尾や途中に書かない。

文字列の記述には「'」を使用する。
ただし、特殊文字（\nなど）を出力するために必要な場合や、
文字列内で「'」を多用する場合は、「"」を使用する。

1ファイル内で1クラスの記述だけにする。

クラスを定義したプログラムファイルでは、クラス定義以外のコードを書かない。
ただし、即時実行クラスの場合は除く。

プロパティは、クラスの先頭で定義する。

SQL文のステートメントは、大文字で記述する。

関数内で使用する変数の準備は、使用する直前で行う。

変数への代入は、1回だけにする。2回以上の代入になる場合は、別変数を準備する。
ただし、対象が明確で多数の書き換え処理を行わなければならないものは除く。

PHPのグローバル定数（$_POST,$_GET,$_SERVER,$_REQUEST,$_COOKIE,$_ENV）
を参照する場合は、必ず文字コードの妥当性を検証する。

getter,setterを定義しない。
ただし、加工を施して入出力を行いたい場合、
setterでチェーンメソッドを使用したい場合は定義する。

setterの定義では、$thisをreturnすることが推奨される。

正規表現の利用は、動作速度の観点から、極力避ける。

文字列中の変数展開では、${変数名}のタイプは使用しない。

global 及び $GLOBALS は使用しない。

アクセス修飾子(public, private, etc.)を省略しない。（PSR-2準拠）

配列の最後の要素の後にもカンマを付けておく。

use は最小限の利用にとどめる。

クラスコメントの@versionは以下の形式で書く。
@version 2.3.45
最初の要素は、apiに変更があり互換性がなくなった場合にアップする。
2番目の要素は、互換性は維持しつつもapiの拡張があった場合にアップする。
3番目の要素は、その他の修正、コメントの修正の場合にアップする。
複数のクラスで、まとめてアップして数字を揃えるということはしない。

配列の宣言は、array()ではなく、[]を使用する。


[テンプレート記述]

テンプレートファイル内で、変数に値を代入しない。
ただし、for, foreach文の「()」内では許される。

テンプレートのプレースホルダは、「<?= $変数名 ?>」というようにショートタイプにする。


[PHP命名規則]

変数、関数、プロパティは、スネークケース（「_」で区切る）で命名する。
また、「_」で開始しない。

ローカル変数名は、なるべく短い名前で定義する。

定数は、スネークケースの大文字で命名する。

クラスは、オートローダーでロードできる名前にする。

クラスは、StudlyCapsで命名する。（PSR-2準拠）
普段、大文字のみで表現する単語でも先頭のみ大文字にする。
例）XmlReader, SqlBuilder

メソッドは、camelCaseで命名する。（PSR-2準拠）

abstract class の名前は、最後にBaseを付ける

テンプレートファイルの拡張子は、「.phtml」とする。

共通テンプレートは、「_」から始まる名前にする。

個別テンプレートをインポートする部分は、「<?= $main ?>」で定義する。
ただし、個別テンプレートが複数の場合は該当しない。

その他、改行・スペース・インデントなどの定義は、IDEの定義ファイルを定義して配布し、
IDEのフォーマット機能を利用する。

getterの名前は、getから開始する。

setterの名前は、setから開始しないで意味を表す名前のみとする。

[コメント]

PHPDoc(PSR-5)スタイルのコメントを付けることが推奨される。
https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md

phpDocumentorに従っても良い。
https://phpdoc.org/docs/latest/index.html

メソッドのコメントで、@param, @return, @throwsについては、挙動があれば記述する。

プロパティ、定数のコメントには、@varを記述し型を指定する。

ソースコード中にコメントアウトした古いプログラムソースを残さない。
